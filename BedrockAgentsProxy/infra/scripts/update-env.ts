#!/usr/bin/env node
import * as fs from 'fs';
import * as path from 'path';
import { execSync } from 'child_process';

/**
 * Script to update environment files with Cognito, API, and Bedrock Agent settings from deployed stack
 * 
 * This script:
 * 1. Gets the outputs from the deployed CloudFormation stack
 * 2. Updates the UI .env files with Cognito and API settings
 * 3. Updates the API .env file with Bedrock Agent settings
 * 4. Can be run after deployment to ensure environment files are up to date
 */

// Stack name - should match the name in infra.ts
const STACK_NAME = 'SmartTodoStack';

// Path to UI and API directories (relative to this script)
const UI_DIR = path.resolve(__dirname, '../../ui');
const API_DIR = path.resolve(__dirname, '../../api');

// Environment files to update
const UI_ENV_FILES = [
  path.join(UI_DIR, '.env'),
  path.join(UI_DIR, '.env.production') // Add .env.production file for Vite production builds
];

const API_ENV_FILE = path.join(API_DIR, '.env');

/**
 * Get CloudFormation stack outputs
 */
function getStackOutputs(): Record<string, string> {
  try {
    console.log(`Getting outputs from stack: ${STACK_NAME}`);
    
    // Run AWS CLI command to get stack outputs
    const result = execSync(
      `aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs[*].{key:OutputKey,value:OutputValue}" --output json`,
      { encoding: 'utf-8' }
    );
    
    // Parse the JSON output
    const outputs = JSON.parse(result);
    
    // Convert to key-value object
    const outputMap: Record<string, string> = {};
    outputs.forEach((output: { key: string, value: string }) => {
      outputMap[output.key] = output.value;
    });
    
    return outputMap;
  } catch (error) {
    console.error('Error getting stack outputs:', error);
    process.exit(1);
  }
}

/**
 * Update UI environment files with stack outputs
 */
function updateUiEnvFiles(outputs: Record<string, string>): void {
  // Extract the values we need for UI
  const userPoolId = outputs.CognitoUserPoolId;
  const userPoolClientId = outputs.CognitoUserPoolClientId;
  const apiUrl = outputs.ApiProxyPath;
  const region = process.env.CDK_DEFAULT_REGION || 'us-east-1';
  
  if (!userPoolId || !userPoolClientId || !apiUrl) {
    console.error('Missing required outputs for UI environment files');
    process.exit(1);
  }
  
  // Create environment variable content for UI
  const uiEnvContent = `# Auto-generated by update-env.ts script
# Last updated: ${new Date().toISOString()}
VITE_COGNITO_USER_POOL_ID=${userPoolId}
VITE_COGNITO_USER_POOL_CLIENT_ID=${userPoolClientId}
VITE_COGNITO_REGION=${region}
`;

  // Update each UI environment file
  UI_ENV_FILES.forEach(filePath => {
    try {
      console.log(`Updating UI environment file: ${filePath}`);
      fs.writeFileSync(filePath, uiEnvContent, 'utf-8');
    } catch (error) {
      console.error(`Error updating ${filePath}:`, error);
    }
  });
  
  console.log('UI environment files updated successfully');
}

/**
 * Update API environment file with stack outputs
 */
function updateApiEnvFile(outputs: Record<string, string>): void {
  // Extract the values we need for API
  const bedrockAgentId = outputs.BedrockAgentId;
  const bedrockAgentAliasId = outputs.BedrockAgentAliasId;
  const kmsKeyId = outputs.TokenEncryptionKeyId;
  
  if (!bedrockAgentId || !bedrockAgentAliasId) {
    console.error('Missing required outputs for API environment file');
    console.error('Make sure the Bedrock Agent has been deployed successfully');
    process.exit(1);
  }
  
  // Create environment variable content for API
  const apiEnvContent = `# Auto-generated by update-env.ts script
# Last updated: ${new Date().toISOString()}
BEDROCK_AGENT_ID=${bedrockAgentId}
BEDROCK_AGENT_ALIAS_ID=${bedrockAgentAliasId}
KMS_KEY_ID=${kmsKeyId || ''}
`;

  try {
    console.log(`Updating API environment file: ${API_ENV_FILE}`);
    fs.writeFileSync(API_ENV_FILE, apiEnvContent, 'utf-8');
    console.log('API environment file updated successfully');
  } catch (error) {
    console.error(`Error updating API environment file:`, error);
  }
}

/**
 * Main function
 */
function main(): void {
  console.log('Updating environment files with Cognito and Bedrock Agent settings...');
  
  // Get stack outputs
  const outputs = getStackOutputs();
  
  // Update UI environment files
  updateUiEnvFiles(outputs);
  
  // Update API environment file
  updateApiEnvFile(outputs);
  
  console.log('All environment files updated successfully');
}

// Run the script
main();
